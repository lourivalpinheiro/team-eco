import asyncio
import streamlit as st
from classes.ui.pages import Page
from classes.ui.logo import Logo
from classes.ui.footer import Footer
from classes.ui.headermenu import HeaderMenu
from classes.ui.textelement import TextElement
from classes.backend.authentication import Authentication
from model import ApiConnection

Page(name="Arquivo", icon="ðŸ“‚", page_layout="wide")
HeaderMenu.hide_menu()
Logo("static/teamLogo.png")

Authentication.authenticate()

TextElement.write("# ðŸ“‚ Arquivo")
TextElement.write_caption("Acompanhe a movimentaÃ§Ã£o dos documentos das empresas pelas quais Ã© responsÃ¡vel.")
st.write("---")

# Carregando notificaÃ§Ãµes com spinner e asyncio
with st.spinner("ðŸ”„ Carregando notificaÃ§Ãµes..."):
    ArchiveNotificationContent = asyncio.run(ApiConnection.get_spreadsheet_notifications_async())

notificationsAmount = ArchiveNotificationContent['Aviso'].count()
with st.expander(f"ðŸ”” NOTIFICAÃ‡Ã•ES: {notificationsAmount}"):
    monthColumn, yearColumn = st.columns(2, gap='small')
    with monthColumn:
        monthSelection = st.selectbox(
            "MÃªs",
            options=sorted(ArchiveNotificationContent['MÃªs'].unique().tolist()),
            placeholder="Selecione um mÃªs..."
        )

    with yearColumn:
        yearSelection = st.selectbox(
            "Ano",
            options=sorted(ArchiveNotificationContent['Ano'].unique().tolist()),
            placeholder="Selecione um ano..."
        )

    filterArchiveNotifications = ArchiveNotificationContent[
        (ArchiveNotificationContent['MÃªs'] == monthSelection) &
        (ArchiveNotificationContent['Ano'] == yearSelection)
    ][['Aviso', 'Data']]

    st.dataframe(filterArchiveNotifications)

# Carregando o dataframe principal com spinner e asyncio
with st.spinner("ðŸ”„ Carregando dados do arquivo..."):
    dataframeAPI = asyncio.run(ApiConnection.get_archive_spreadsheet_content_async())

if 'dataframeAPI' not in st.session_state:
    st.session_state['dataframeAPI'] = dataframeAPI

options = sorted(dataframeAPI['COMPETÃŠNCIA'].str.strip().dropna().unique().tolist())

selected = st.selectbox(
    label='COMPETÃŠNCIA',
    placeholder='Selecione uma opÃ§Ã£o...',
    options=options,
    key='archiveSelect'
)

filtered_df = dataframeAPI[dataframeAPI['COMPETÃŠNCIA'] == selected]
st.dataframe(filtered_df)

st.session_state['filtered_df'] = filtered_df

with st.sidebar:
    logout = st.button("SAIR")
    if logout:
        Authentication.logout()

Footer.footer()
