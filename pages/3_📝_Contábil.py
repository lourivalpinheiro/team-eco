# Importing necessary libraries
import streamlit as st
import pandas as pd
from classes.ui.pages import Page
from classes.ui.logo import Logo
from classes.ui.footer import Footer
from classes.ui.headermenu import HeaderMenu
from classes.backend.authentication import Authentication
from classes.backend.data.googleapi.apicompaniesfollowup import companiesFollowup_spreadsheet_content
from streamlit_gsheets import GSheetsConnection
from model import df

# Page's main configuration
Page(name="Cont√°bil", icon="üìù", page_layout="wide")
HeaderMenu.hide_menu()
Logo("static/teamLogo.png")

# Login state
Authentication.authenticate()

# Page's content
st.markdown("# üìù Cont√°bil")
st.caption("Utilize as ferramentas desenvolvidas para o setor.")

# Notifications
AccountingsNotificationsSpreadSheet = st.connection("gsheets", type=GSheetsConnection)
AccountingsNotificationContent = AccountingsNotificationsSpreadSheet.read(
    spreadsheet=st.secrets['database']['accountingsSpreadSheet'],
    worksheet=st.secrets['database']['accountingsNotifications'],
)

notificationsAmount = AccountingsNotificationContent['Aviso'].count()
with st.expander(f"üîî NOTIFICA√á√ïES: {notificationsAmount}"):
    monthColumn, yearColumn = st.columns(2, gap='small')
    with monthColumn:
        monthSelection = st.selectbox(
            "M√™s",
            options= sorted(AccountingsNotificationContent['M√™s'].unique().tolist()),
            placeholder="Selecione um m√™s...",
            index=None
        )

    with yearColumn:
        yearSelection = st.selectbox(
            "Ano",
            options= sorted(AccountingsNotificationContent['Ano'].unique().tolist()),
            placeholder = "Selecione um ano...",
            index = None
        )

    filterArchiveNotifications = AccountingsNotificationContent[['Aviso', 'Data']].where(
        (AccountingsNotificationContent['M√™s'] == monthSelection) &
        (AccountingsNotificationContent['Ano'] == yearSelection)
    )
    st.dataframe(filterArchiveNotifications)

tab1, tab2 = st.tabs(["üßæ PLANILHAS NFSE", "üîé ACOMPANHAMENTO DE EMPRESAS"])

with tab1:
    # Tabs
    guideTab, tooltTab = st.tabs(["MANUAL", "FERRAMENTA"])

    with guideTab:
        # Title
        st.markdown("# üîé Manual do usu√°rio")
        st.caption("Aprenda a tirar o melhor proveito poss√≠vel da ferramenta.")
        st.divider()

        # Describing the tool's objective
        st.markdown("# üéØ Objetivo")
        st.divider()
        st.markdown('''
        "Planilhas Nfse" foi desenvolvido como um projeto piloto, tendo o intuito de ajudar o processo de lan√ßamento de notas fiscais de servi√ßo no setor Cont√°bil, com margem para ter suas funcionalidades expandidas.
    ''')

        # Describing how the process worked before
        st.markdown("## Como o processo funcionava antes?")
        st.divider()
        st.markdown('''
        1. Criar uma planilha no excel;
        2. Criar o cabe√ßalho com colunas portadoras dos seguintes campos: 
            - D√âBITO;
            - CR√âDITO;
            - DATA;
            - VALOR;
            - HIST√ìRICO;
            - NF;
            - MATRIZ;
            - FILIAL.
        3. Preencher as linhas de acordo com cada vari√°vel (coluna);
        4. Concatenar as colunas "HIST√ìRICO" e "NF" a fim de formar uma √∫nica c√©lula;
        5. Salvar em formato .CSV;
        6. Importar no sistema.
    ''')

        # Describing how the process can work now
        st.markdown("## O processo agora")
        st.divider()
        firstTwoSteps, lastTwoSteps = st.columns(2, gap="medium")

        with firstTwoSteps:
            st.markdown("Planilhas NFSe")
            with st.container(border=True, height=400, key="firstContainer"):
                # Picture and text - Step 1
                firstPicture, firstCaption = st.columns(2, gap="small")
                with firstPicture:
                    st.image(image="static/screenshot_teamecosystem.png", caption="PASSO 1")

                with firstCaption:
                    st.markdown('''
                    Por meio do formul√°rio, conseguimos inserir os dados de uma forma mais r√°pida, al√©m de n√£o precisarmos perder tempo para primeiro criar a estrutura aceita pelo sistema, nem aplicar f√≥rmula de concatena√ß√£o.
                ''')

                # Picture and text
                secondPicture, secondCaption = st.columns(2, gap="small")
                with secondPicture:
                    st.image(image="static/screenshot_downloadbutton.png", caption="PASSO 2")

                with secondCaption:
                    st.markdown('''
                        Ap√≥s a inser√ß√£o dos dados, podemos clicar no bot√£o de **"download"**, que aparece ao passarmos o "mouse" em cima da tabela, e baix√°-la em formato **.CSV**, formato de importa√ß√£o aceito pelo sistema.
                    ''')

        with lastTwoSteps:
            st.markdown("Excel")
            with st.container(border=True, height=400, key="secondContainer"):
                # Picture and text
                thirdPicture, thirdCaption = st.columns(2, gap="small")
                with thirdPicture:
                    st.image(image="static/screenshot_texto-para-colunas.png", caption="PASSO 3")

                with thirdCaption:
                    st.markdown('''
                        Ao abrirmos o arquivo, nos   deparamos com todos os dados agrupados em uma √∫nica coluna, tendo como solu√ß√£o a op√ß√£o nativa do excel de "Texto para colunas". Para ter acesso √† essa funcionalidade, **basta navegar at√© a aba dados, e selecionar a op√ß√£o "Texto para colunas"**.
                    ''')

                # Picture and text
                fourthPicture, fourthCaption = st.columns(2, gap="small")
                with fourthPicture:
                    st.image(image="static/screenshot_textoparacolunas_tiposdedados.png", caption="PASSO 4")

                with fourthCaption:
                    st.markdown('''
                        Selecionamos "DELIMITADO" como a nossa op√ß√£o de **"TIPOS DE DADOS ORIGINAIS"** e clicamos em **AVAN√áAR**.
                    ''')

        # End of the process
        st.markdown("Excel")
        with st.container(border=True, height=350, key="thirdContainer"):
            # Picture and text
            fifthPicture, fifthCaption = st.columns(2, gap="small")
            with fifthPicture:
                st.image(image="static/screenshot_delimitadores.png", caption="PASSO 5")

            with fifthCaption:
                st.markdown('''Selecionamos a op√ß√£o **"OUTROS"** como delimitador e clicamos em avan√ßar e, depois, em **"CONCLUIR"**. ''')
                with st.expander(label="OBS.:"):
                    indexImage, indexText = st.columns(2, gap="small")
                    with indexImage:
                        st.image("static/removerindex.png")

                    with indexText:
                        st.markdown('''Para baixar a planilha sem a coluna de index, basta colocar o "mouse" em cima da coluna, apertar os tr√™s pontos e clicar na op√ß√£o ***"Hide column"*** (esconder coluna).''')
                    st.markdown("Faz-se necess√°rio removermos o cabe√ßalho antes de importar.")
                    st.markdown("Em caso de d√∫vidas, voc√™ pode sempre contar com um l√≠der.")

        st.success("ü•≥ **Parab√©ns!** Voc√™ concluiu o processo. Agora √© s√≥ salvar a planilha e import√°-la no sistema.")

    with tooltTab:
        # Creating session state
        if 'df' not in st.session_state:
            st.session_state['df'] = df


        # Form and Dataframe
        form, dataframe = st.columns(2, gap="small")

        with form:
            ## Form
            with st.form("nfseData", enter_to_submit=False, clear_on_submit=True):
                debitColumn, creditColumn = st.columns(2, gap="small")
                with debitColumn:
                    debit = st.text_input(label="D√âBITO", type="default")

                with creditColumn:
                    credit = st.text_input(label="CR√âDITO", type="default")

                dateColumn, amountColumn = st.columns(2, gap="small")
                with dateColumn:
                    factDate = st.date_input(label='DATA', format="DD/MM/YYYY")

                with amountColumn:
                    amount = st.number_input(label="VALOR")

                description = st.text_area(label="HIST√ìRICO", value="Vlr. da Aquisicao de Servi√ßos Conf. NF")

                matrixColumn, filialColumn = st.columns(2, gap="small")
                with matrixColumn:
                    matrix = st.text_input(label="MATRIZ")

                with filialColumn:
                    filial = st.text_input(label="FILIAL")

                submit = st.form_submit_button(label="ENVIAR")
                # Condition
                if submit:
                    if debit == "" or credit == "" or factDate == "" or amount == "" or description == "" or matrix == "" or filial == "":
                        st.error("‚ùå Preencha todos os campos!")
                    else:
                        new_data = {
                            'DEBITO': debit,
                            'CREDITO': credit,
                            'DATA': factDate,
                            'VALOR': amount,
                            'HISTORICO': description,
                            'MATRIZ': matrix,
                            'FILIAL': filial
                        }
                        # New line
                        new_row_df = pd.DataFrame([new_data])

                        # Concatenating
                        st.session_state['df'] = pd.concat([st.session_state['df'], new_row_df], ignore_index=True)
                        st.success("‚úÖ Dados adicionados com sucesso!")

        # Updated datafrane for the user
        with dataframe:
            st.dataframe(st.session_state["df"])

with tab2:
    
    st.markdown('## Acompanhamento de empresas')
    st.caption('Fique por dentro do progresso das atividades para fechamento.')
    st.info('**OBS.:** todos os filtros precisam ter uma op√ß√£o selecionada para funcionar.', icon='‚ÑπÔ∏è')

    st.divider()

    # Spreadhseet
    companiesOptionsColumn, employeeOptionsColumn, statusOptions = st.columns(3, gap="medium")

    with st.popover('LEGENDA'):
        st.markdown("""
            **üè¢ EMPRESA**: empresa a qual deseja acompanhar;
            
            **üôãüèΩ‚Äç‚ôÄÔ∏è RESPONS√ÅVEL**: respons√°vel pela empresa;
            
            **üè∑Ô∏è STATUS**: situa√ß√£o da opera√ß√£o realizada.
        """)

    with companiesOptionsColumn:
        companiesOptions = sorted(companiesFollowup_spreadsheet_content['empresa'].str.strip().dropna().unique().tolist())
        selectedCompany = st.selectbox(
            label='Empresa',
            placeholder='Selecione uma op√ß√£o...',
            options=companiesOptions,
            index=None,
            key='companiesFollowUpFilter'
        )

    with employeeOptionsColumn:
        employeeOptions = sorted(
        companiesFollowup_spreadsheet_content['responsavel'].str.strip().dropna().unique().tolist())
        selectedEmployee = st.selectbox(
            label='Respons√°vel',
            placeholder='Selecione uma op√ß√£o...',
            options=employeeOptions,
            index=None,
            key='employeesFollowUpFilter'
        )

    with statusOptions:
        statusOptions = sorted(companiesFollowup_spreadsheet_content['status'].str.strip().dropna().unique().tolist())
        selectedStatus = st.selectbox(
            label='Status',
            placeholder='Selecione uma op√ß√£o...',
            options=statusOptions,
            index=None,
            key='statusFollowUpFilter'
        )

    companiesFollowup_spreadsheet_content = companiesFollowup_spreadsheet_content[
        (companiesFollowup_spreadsheet_content['empresa'] == selectedCompany) &
        (companiesFollowup_spreadsheet_content['responsavel'] == selectedEmployee) &
        (companiesFollowup_spreadsheet_content['status'] == selectedStatus)]
    st.dataframe(companiesFollowup_spreadsheet_content)

with st.sidebar:
    logout = st.button("SAIR")
    if logout:
        Authentication.logout()

Footer.footer()