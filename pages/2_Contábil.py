# Importing necessary modules
import streamlit as st
import pandas as pd
import asyncio
from classes.ui.pages import Page
from classes.ui.logo import Logo
from classes.ui.footer import Footer
from classes.ui.headermenu import HeaderMenu
from classes.backend.authentication import Authentication
from classes.ui.textelement import TextElement
from model import ApiConnection
from model import df


Page(name="Cont√°bil", icon="üìù", page_layout="wide")
HeaderMenu.hide_menu()
Logo("static/teamLogo.png")

Authentication.authenticate()

if st.session_state.get("authenticated", False):

    TextElement.write("# üìù Cont√°bil")
    TextElement.write_caption("Utilize as ferramentas desenvolvidas para o setor.")

    # Aqui usa o async s√≥ para as notifica√ß√µes cont√°beis
    with st.spinner("üîÑ Carregando notifica√ß√µes..."):
        notification_df = asyncio.run(ApiConnection.get_accountings_notifications_async())

    notificationsAmount = notification_df['Aviso'].count()
    with st.expander(f"üîî NOTIFICA√á√ïES: {notificationsAmount}"):
        monthColumn, yearColumn = st.columns(2, gap='small')
        with monthColumn:
            monthSelection = st.selectbox(
                "M√™s",
                options=sorted(notification_df['M√™s'].unique().tolist()),
                placeholder="Selecione um m√™s...",
                index=None
            )
        with yearColumn:
            yearSelection = st.selectbox(
                "Ano",
                options=sorted(notification_df['Ano'].unique().tolist()),
                placeholder="Selecione um ano...",
                index=None
            )

        filterArchiveNotifications = notification_df[['Aviso', 'Data']].where(
            (notification_df['M√™s'] == monthSelection) & (notification_df['Ano'] == yearSelection)
        )
        st.dataframe(filterArchiveNotifications)


    tab1, tab2 = st.tabs(["PLANILHAS NFSE", "ACOMPANHAMENTOS"])

    with tab1:
        if 'df' not in st.session_state:
            st.session_state['df'] = df

        form, dataframe = st.columns(2, gap="small")
        with form:
            with st.form("nfseData", enter_to_submit=False, clear_on_submit=True):
                debitColumn, creditColumn = st.columns(2, gap="small")
                with debitColumn:
                    debit = st.text_input(label="D√âBITO")

                with creditColumn:
                    credit = st.text_input(label="CR√âDITO")

                dateColumn, amountColumn = st.columns(2, gap="small")
                with dateColumn:
                    factDate = st.date_input(label='DATA', format="DD/MM/YYYY")

                with amountColumn:
                    amount = st.number_input(label="VALOR")

                description = st.text_area(label="HIST√ìRICO", value="Vlr. da Aquisicao de Servi√ßos Conf. NF")

                matrixColumn, filialColumn = st.columns(2, gap="small")
                with matrixColumn:
                    matrix = st.text_input(label="MATRIZ")

                with filialColumn:
                    filial = st.text_input(label="FILIAL")

                submit = st.form_submit_button(label="ENVIAR")

                if submit:
                    if not all([debit, credit, factDate, amount, description, matrix, filial]):
                        st.error("‚ùå Preencha todos os campos!")
                    else:
                        new_data = {
                            'DEBITO': debit,
                            'CREDITO': credit,
                            'DATA': factDate,
                            'VALOR': amount,
                            'HISTORICO': description,
                            'MATRIZ': matrix,
                            'FILIAL': filial
                        }
                        new_row_df = pd.DataFrame([new_data])
                        st.session_state['df'] = pd.concat([st.session_state['df'], new_row_df], ignore_index=True)
                        st.success("‚úÖ Dados adicionados com sucesso!")

        with dataframe:
            st.dataframe(st.session_state["df"])


    with tab2:
        companiesFolloUpTab, documentationFollowUpTab = st.tabs(["TRIMESTRE", "DOCUMENTA√á√ÉO FALTANTE"])
        with companiesFolloUpTab:
            TextElement.write('## Acompanhamento de empresas')
            TextElement.write_caption('Fique por dentro do progresso das atividades para fechamento.')
            st.info('**OBS.:** todos os filtros precisam ter uma op√ß√£o selecionada para funcionar.', icon='‚ÑπÔ∏è')
            st.divider()

            companies_df = ApiConnection.get_companies_followup()

            companiesOptionsColumn, employeeOptionsColumn, statusOptions = st.columns(3, gap="medium")

            with st.popover('LEGENDA'):
                st.markdown("""
                    **üè¢ EMPRESA**: empresa a qual deseja acompanhar;
                    **üôãüèΩ‚Äç‚ôÄÔ∏è RESPONS√ÅVEL**: respons√°vel pela empresa;
                    **üè∑Ô∏è STATUS**: situa√ß√£o da opera√ß√£o realizada.
                """)

            with companiesOptionsColumn:
                companiesOptions = sorted(companies_df['empresa'].str.strip().dropna().unique().tolist())
                selectedCompany = st.selectbox('Empresa', options=companiesOptions, placeholder="Selecione...", index=None)

            with employeeOptionsColumn:
                employeeOptions = sorted(companies_df['responsavel'].str.strip().dropna().unique().tolist())
                selectedEmployee = st.selectbox('Respons√°vel', options=employeeOptions, placeholder="Selecione...", index=None)

            with statusOptions:
                statusOptions = sorted(companies_df['status'].str.strip().dropna().unique().tolist())
                selectedStatus = st.selectbox('Status', options=statusOptions, placeholder="Selecione...", index=None)

            filtered = companies_df[
                (companies_df['empresa'] == selectedCompany) &
                (companies_df['responsavel'] == selectedEmployee) &
                (companies_df['status'] == selectedStatus)
            ]
            st.dataframe(filtered)

        with documentationFollowUpTab:
            TextElement.write('## Documenta√ß√£o faltante')
            TextElement.write_caption('Documenta√ß√µes n√£o enviadas pelos clientes ou n√£o solicitadas.')
            st.info('**OBS.:** todos os filtros precisam ter uma op√ß√£o selecionada para funcionar.', icon='‚ÑπÔ∏è')
            st.divider()

            documentation_df = ApiConnection.get_documentation_followup_content()

            companiesOptionsColumn, competenceColumn = st.columns(2, gap="medium")

            with st.popover('LEGENDA'):
                st.markdown("""
                                **EMPRESA**: empresa a qual deseja acompanhar;

                                **COMPET√äNCIA**: trimestre a qual a documenta√ß√£o pertence.
                            """)

            with companiesOptionsColumn:
                companiesOptionsDoc = sorted(documentation_df['empresa'].str.strip().dropna().unique().tolist())
                selectedCompany = st.selectbox('Empresas', options=companiesOptionsDoc, placeholder="Selecione...",
                                               index=None)

            with competenceColumn:
                competenceOptions = sorted(documentation_df['competencia'].str.strip().dropna().unique().tolist())
                selectedCompetence = st.selectbox('Compet√™ncia', options=competenceOptions, placeholder="Selecione...", index=None)


            filtered = documentation_df[
                (documentation_df['empresa'] == selectedCompany) &
                (documentation_df['competencia'] == selectedCompetence)
                ]
            st.dataframe(filtered)


else:
    st.warning("‚ö†Ô∏è Voc√™ precisa estar logado para acessar esta p√°gina.")


with st.sidebar:
    logout = st.button("SAIR")
    if logout:
        Authentication.logout()


Footer.footer()
